form(name="updateVM.form", novalidate)
  .h4.text-dark-secondary
    strong #{ __("General") }
  .row
    .col-sm-8
      .form-group(
        ng-class="{ 'has-error': updateForm.hasError(updateVM.form.name) }"
      )
        label #{ __("Name") }
        input.form-control(
          type="text"
          name="name"
          ng-model="updateVM.data.name"
          required
          ng-maxlength="100"
          field-original-value="{{ updateVM.item.name }}"
        )
        .help-block(
          ng-messages="updateVM.form.name.$error"
          ng-show="updateForm.hasError(updateVM.form.name)"
        )
          span(ng-message="required") #{ __("This field is required.") }
          span(ng-message="maxlength") #{ __("This field must not exceed %s chars.", "100") }
    .col-sm-4
      .form-group(
        ng-class="{ 'has-error': updateForm.hasError(updateVM.form.version) }"
      )
        label #{ __("Version") }
        input.form-control(
          type="text"
          name="version"
          ng-model="updateVM.data.version"
          ng-pattern="/^\\d+\\.\\d+(\\.\\d+)*$/"
          ng-disabled="updateVM.isDigital()"
          required
        )
        .help-block(
          ng-messages="updateVM.form.version.$error"
          ng-show="updateForm.hasError(updateVM.form.version)"
        )
          span(ng-message="required") #{ __("This field is required.") }
          span(ng-message="pattern") #{ __("Invalid version format") }
  .form-group
    label #{ __("Status") }
    .status-group
      .status-item(ng-repeat="status in FILTER_STATUS", class="status-{{ status.value | lowercase }}", ng-click="updateVM.updateStatus(status.value)", ng-class="{ active: updateVM.data.lifecycleStatus == status.value, enabled: updateVM.data.lifecycleStatus == status.value && !updateVM.statusUpdated }")
        span.item-icon
        span.item-text {{ status.value }}
  .row
    .col-sm-8
      .form-group(
        ng-class="{ 'has-error' : updateForm.hasError(updateVM.form.brand) }"
      )
        label #{ __("Brand") }
        input.form-control(
          type="text"
          name="brand"
          ng-model="updateVM.data.brand"
          required
          ng-maxlength="100"
        )
        .help-block(
          ng-messages="updateVM.form.brand.$error"
          ng-show="updateForm.hasError(updateVM.form.brand)"
        )
          span(ng-message="required") #{ __("This field is required.") }
          span(ng-message="maxlength") #{ __("This field must not exceed %s chars.", "100") }
    .col-sm-4
      .form-group(
        ng-class="{ 'has-error' : updateForm.hasError(updateVM.form.productNumber) }"
      )
        label
          span #{ __("ID Number") }
          small.text-muted (#{ __("optional") })
        input.form-control(
          type="text"
          name="productNumber"
          ng-model="updateVM.data.productNumber"
        )
        .help-block(
          ng-messages="updateVM.form.productNumber.$error"
          ng-show="updateForm.hasError(updateVM.form.productNumber)"
        )
  .form-group
    label
      span #{ __("Description") }
      small.text-muted (#{ __("optional") })
    textarea.form-control(rows="3", name="description", ng-model="updateVM.data.description")
  .form-group.text-right
    a.btn.btn-success(
      ng-click="updateVM.update()"
      ng-disabled="!updateVM.form.$valid || updateVM.update.status === updateVM.STATUS.PENDING"
    )
      span.item-icon.fa.fa-spin.fa-spinner(ng-if="updateVM.update.status === updateVM.STATUS.PENDING")
      span.item-text #{ __("Update") }